public class SudokuSolver {

	public Sudoku sudoku;
	private boolean[][] userEntry;

	public SudokuSolver(Sudoku s) {
		sudoku = s;
		userEntry = setBooleanMatrix(s);
	}
	
	public static void main(String[] args){
		Sudoku s = new Sudoku();
		SudokuSolver ss = new SudokuSolver(s);
		s.sudoku[0][0] = 1;
		s.sudoku[1][0] = 2;
		s.sudoku[0][2] = 3;
		s.sudoku[7][6] = 7;
		s.sudoku[0][7] = 8;
		ss.solve();
		for(int i = 0; i<9;i++){
			for(int j = 0; j<9;j++){
				System.out.print(ss.sudoku.sudoku[i][j]);
			}
			System.out.println("");
		}
		if(ss.sudoku.sudokuSolved){
			System.out.println("slut");
		}
		
	}

	private boolean[][] setBooleanMatrix(Sudoku s) {
		boolean[][] temp = new boolean[9][9];
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				if (s.sudoku[i][j] != 0) {
					temp[i][j] = true;
				}
			}
		}
		return temp;
	}
	
	public boolean checkinput(){
		for(int i = 0; i<9;i++){
			for(int j = 0; j<9;j++){
				if(!legalMove(sudoku.sudoku[i][j], i, j)){
					return false;
				}
			}
		}
		return true;
	}
	

	public boolean solve() {
		if(!checkinput()){
			return false;
		}
		solveHelp(0, 0);
		if (!sudoku.sudokuSolved) {
			return false;
		}
		return true;
	}

	public boolean solveHelp(int row, int column) {
		if(sudoku.sudoku[8][8] != 0){
			sudoku.sudokuSolved = true;
			return true;
		}
		if (!userEntry[row][column]) {
			for (int i = 1; i <= 9; i++) {
				if (legalMove(i, row, column)) {
					sudoku.sudoku[row][column] = i;
					if(solveHelp(goForward(row, column)[0], goForward(row, column)[1])){
						return true;
					}
				}
			}
			sudoku.sudoku[row][column] = 0;
			return false;
		}else{
			if(solveHelp(goForward(row, column)[0], goForward(row, column)[1])){
				return true;
			}
			return false;
		}
	}
	
	private boolean checkRules(int r, int c) {
		for (int i = 0; i < 9; i++) {
			if (i != c) {
				if (sudoku.sudoku[r][i] == sudoku.sudoku[r][c]) {
					return false;
				}
			}
			if (i != r) {
				if (sudoku.sudoku[i][c] == sudoku.sudoku[r][c]) {
					return false;
				}
			}
		}

		int cc = 3 * (c / 3);
		int rr = 3 * (r / 3);

		for (int rad = rr; rad <= rr + 2; rad++) {
			for (int col = cc; col <= cc + 2; col++) {
				if (sudoku.sudoku[rad][col] == sudoku.sudoku[r][c] && rad != r && col != c) {
					return false;
				}
			}
		}
		return true;
	}

	private boolean legalMove(int m, int row, int column) {
		if(m > 0 && m <10){
		
		

			for (int i = 0; i < 9; i++) {
				// Kan vara fel
				if (sudoku.sudoku[row][i] == m) {
					return false;
				}
				if (sudoku.sudoku[i][column] == m) {
					return false;
				}
			}
			if (checkSquare(m, row, column)) {
				return true;
			}
		}
		return false;
	}

	private boolean checkSquare(int m, int row, int column) {
		int boxRow = row / 3;
		int boxColumn = column / 3;

		for (int i = (0 + 3 * boxRow); i <= 2 + (3 * boxRow); i++) {
			for (int j = (0 + 3 * boxColumn); j <= 2 + (3 * boxColumn); j++) {
				if (sudoku.sudoku[i][j] == m) {
					return false;
				}
			}
		}
		return true;
	}

	private int[] goForward(int row, int column) {
		int[] index = new int[2];
		index[0] = goForwardRow(row, column);
		index[1] = goForwardColumn(row, column);
		return index;
	}

	private int goForwardRow(int row, int column) {
		if (column == 8 && row != 8) {
			row++;
		}
		return row;
	}

	private int goForwardColumn(int row, int column) {
		if (column == 8) {
			column = 0;
			return column;
		}
		return column + 1;
	}
}