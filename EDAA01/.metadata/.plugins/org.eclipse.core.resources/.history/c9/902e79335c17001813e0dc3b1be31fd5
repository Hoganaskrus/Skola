import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextField;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.text.Font;
import javafx.stage.Stage;


public class SudokuViewer extends Application {

	
	@Override
	public void start(Stage primaryStage) throws Exception {

		
		// Skapar vyn
		BorderPane root = new BorderPane();
		Scene scene = new Scene(root, 1000, 500);
		primaryStage.setTitle("Sudoku");
		primaryStage.setScene(scene);
		primaryStage.show();

		HBox hbox = new HBox();
		root.setBottom(hbox);

		GridPane gridPane = new GridPane();
		TextField[][] listOfTextFields = new TextField[9][9];

		for (int row = 0; row < 9; row++) {
			for (int column = 0; column < 9; column++) {
				TextField textField = new TextField();
				textField.setText("0");
				textField.textProperty().addListener((observable, oldValue, newValue) -> {
					// [Tillåter allt mellan 0 och 9] (| betyder och) /b*
					// "blank"
					if (newValue.matches("[0-9]$*|\b*")) {
						// System.out.println("Added " + newValue + " to
						// Sudoku.");
					} else {
						textField.setText(oldValue);
						// System.out.println("Fel input");
					}
				});
				textField.setAlignment(Pos.CENTER);
				textField.setFont(Font.font("Verdana", 20));
				textField.setPrefHeight(50);
				textField.setPrefWidth(50);
				textField.setEditable(true);				

				listOfTextFields[row][column] = textField;

				gridPane.add(textField, column, row);
			}
		}

		// Lägger till textField som berättar om Sudokut går att lösa
		TextField solvable = new TextField();
		solvable.setText("Solvable:");
		solvable.setMinWidth(200);
		solvable.setEditable(false);

		// Lägger till textField som berättar tiden det tog att lösa Sudokut
		TextField timeToSolve = new TextField();
		timeToSolve.setText("Time to solve:");
		timeToSolve.setMinWidth(200);
		timeToSolve.setEditable(false);

		// Lägger till Solve-knapp
		Button solve = new Button("Solve");
		solve.setMinWidth(100);
		solve.setOnAction(event -> {
			Integer[][] sudoku = new Integer[9][9];
			for (int row = 0; row < 9; row++) {
				for (int column = 0; column < 9; column++) {
					sudoku[row][column] = Integer.parseInt(listOfTextFields[row][column].getText());
				}
			}
			Sudoku s = new Sudoku();
			s.sudoku = sudoku;
			SudokuSolver ss = new SudokuSolver(s);
			long start = System.currentTimeMillis();
			ss.solve();
			long end = System.currentTimeMillis();
			
			for (int row = 0; row < 9; row++) {
				for (int column = 0; column < 9; column++) {
					listOfTextFields[row][column].setText(ss.sudoku.sudoku[row][column].toString());
				}
			}
			solvable.setText("Solvable: " + s.sudokuSolved);
			timeToSolve.setText("Time to solve: " + (end-start) + "milliseconds");
		});

		// Lägger till Clear-knapp
		Button clear = new Button("Clear");
		clear.setMinWidth(100);
		clear.setOnAction(event -> {
			for (int row = 0; row < 9; row++) {
				for (int column = 0; column < 9; column++) {
					listOfTextFields[row][column].setText("0");
					;
				}
			}
			solvable.setText("Solvable:");
			timeToSolve.setText("Time to solve:");
		});
		
		

		// Hämtar allt till hbox 
		hbox.getChildren().addAll(solve, clear, gridPane, solvable, timeToSolve);
	}

	public static void main(String[] args) {
		Application.launch(args);
	}

}